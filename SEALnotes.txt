SEAL CKKS MINI DOCS
Daniel Joo

____________________________________________________
BOILERPLATE CODE

using namespace SEAL;
using namespace std;

int main(){

    /* 
    SETUP FOR CKKS ENCRYPTION:
        poly_modulus_degree   : XXXXXX
        coeffModulus bit sizes: XXXXXX
        scale                 : XXXXXX
    */

    EncryptionParameters parms(scheme_type::ckks);

    size_t poly_modulus_degree = XXXXXX;
    parms.set_poly_modulus_degree(poly_modulus_degree);
    parms.set_coeff_modulus(CoeffModulus::Create(poly_modulus_degree, {XXXXXX}));

    SEALContext context(parms);
    //print_parameters(context);
    //cout << endl;

    KeyGenerator keygen(context);
    auto secret_key = keygen.secret_key();
    PublicKey public_key;
    keygen.create_public_key(public_key);
    RelinKeys relin_keys;
    keygen.create_relin_keys(relin_keys);
    GaloisKeys galois_keys;
    keygen.create_galois_keys(galois_keys);
    Encryptor encryptor(context, public_key);
    Evaluator evaluator(context);
    Decryptor decryptor(context, secret_key);

    CKKSEncoder encoder(context);
    size_t slot_count = encoder.slot_count();
    //cout << "Number of slots: " << slot_count << endl;

    auto scale = pow(2.0, XXXXXX);

    /* OPERATIONS BELOW */

}

____________________________________________________
OPERATIONS IN CKKS

/* ENCODING AND ENCRYPTING */
encoder.encode(Vector<numType> XXXXXX, Scale, Plaintext);
encryptor.encrypt(Plaintext, Ciphertext);

/* DECODING AND DECRYPTING */
decryptor.decrypt(Ciphertext, Plaintext);
ckks_encoder.decode(Plaintext, Vector<numType>);

/* MATHEMATICAL FUNCTIONS */
evaluator.rotate_vector(Ciphertext source, int, GaloisKeys, Ciphertext target);
evaluator.square(Ciphertext source, Ciphertext target);
evaluator.multiply_plain(Ciphertext, Plaintext, Ciphertext target);
evaluator.multiply_inplace(Ciphertext target, Ciphertext);
evaluator.add(Ciphertext, Ciphertext, Ciphertext target);
evaluator.add_plain_inplace(Ciphertext, Plaintext);

/* EXTRA OPERATIONS */
evaluator.relinearize_inplace(Ciphertext, RelinKeys);
evaluator.rescale_to_next_inplace(Ciphertext);
evaluator.mod_switch_to_inplace(Ciphertext, parms_id_type);
context.get_context_data(Ciphertext.parms_id())->chain_index() << endl;
Ciphertext.scale() = pow(2.0, XXXXXX); //change scale; dangerous

/* VIEWING PARAMETERS */
Ciphertext.scale() //return scale
Ciphertext.parms_id() //return parms_id_type object


